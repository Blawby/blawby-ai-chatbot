name: Deploy Frontend and Backend

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]  # Trigger on version tags
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci
      
    - name: Set version info
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="dev-${GITHUB_SHA:0:8}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "deploy_timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
        echo "Deploying version: $VERSION"

    - name: Type check
      run: npm run type-check || echo "TypeScript check skipped (no type-check script)"

    - name: Build frontend
      run: npm run build

    - name: Install Wrangler
      run: npm install -g wrangler

    - name: Deploy backend to Cloudflare Workers
      run: |
        echo "Deploying version ${{ steps.version.outputs.version }} at ${{ steps.version.outputs.deploy_timestamp }}"
        wrangler deploy --env production --var VERSION=${{ steps.version.outputs.version }} --var DEPLOY_TIMESTAMP=${{ steps.version.outputs.deploy_timestamp }}
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        
    - name: Smoke test after deployment
      run: |
        set -euo pipefail
        echo "Running smoke test on deployed worker..."
        # Wait for deployment to propagate
        sleep 30
        
        # Test health endpoint
        curl -f "${{ secrets.CLOUDFLARE_PUBLIC_URL }}/api/health"
        
        # Test analyze endpoint with small PDF (if available)
        if [ -f "test-document.pdf" ]; then
          curl -X POST "${{ secrets.CLOUDFLARE_PUBLIC_URL }}/api/analyze" \
            -F "file=@test-document.pdf" \
            -F "question=Test analysis" \
            -H "X-Request-ID: smoke-test-$(date +%s)" \
            --max-time 120
        else
          echo "No test document available, skipping analyze test"
        fi
        
    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, attempting rollback..."
        # Store current deployment info for potential rollback
        echo "Failed deployment version: ${{ steps.version.outputs.version }}"
        echo "Failed deployment timestamp: ${{ steps.version.outputs.deploy_timestamp }}"
        # Note: Actual rollback would require storing previous deployment artifacts
        # For now, we'll just log the failure for manual intervention
        echo "Manual rollback may be required. Check Cloudflare dashboard."

    # Teams are managed via the API â€” see TEAM_API_MIGRATION.md for usage

    - name: Deploy frontend to Cloudflare Pages
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: ${{ secrets.CLOUDFLARE_PAGES_PROJECT_NAME }}
        directory: dist
        gitHubToken: ${{ secrets.GITHUB_TOKEN }} 