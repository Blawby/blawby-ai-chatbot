{
  "version": 3,
  "sources": ["../bundle-LiPYD9/checked-fetch.js", "../../../worker/index.ts", "../../../../../../.nvm/versions/node/v20.19.2/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../.nvm/versions/node/v20.19.2/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-LiPYD9/middleware-insertion-facade.js", "../../../../../../.nvm/versions/node/v20.19.2/lib/node_modules/wrangler/templates/middleware/common.ts", "../bundle-LiPYD9/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/paulchrisluke/Repos2025/preact-cloudflare-intake-chatbot/preact-chat-gpt-interface/.wrangler/tmp/dev-fp8TVT",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "/// <reference types=\"@cloudflare/workers-types\" />\n\nexport interface Env {\n  AI: any;\n  DB: D1Database;\n  CHAT_SESSIONS: KVNamespace;\n}\n\ninterface ChatMessage {\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n}\n\ninterface ChatRequest {\n  messages: ChatMessage[];\n  teamId?: string;\n  sessionId?: string;\n}\n\nexport default {\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n    const url = new URL(request.url);\n    const path = url.pathname;\n\n    // CORS headers\n    const corsHeaders = {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    };\n\n    // Handle preflight requests\n    if (request.method === 'OPTIONS') {\n      return new Response(null, { headers: corsHeaders });\n    }\n\n    try {\n      // API routes\n      if (path.startsWith('/api/chat')) {\n        return handleChat(request, env, corsHeaders);\n      }\n      \n      if (path.startsWith('/api/teams')) {\n        return handleTeams(request, env, corsHeaders);\n      }\n\n      // Health check\n      if (path === '/api/health') {\n        return new Response(JSON.stringify({ \n          status: 'ok', \n          timestamp: new Date().toISOString(),\n          environment: 'production'\n        }), {\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      }\n\n      // Favicon\n      if (path === '/favicon.ico') {\n        return new Response(null, { status: 204 });\n      }\n\n      // Root route - API documentation\n      if (path === '/') {\n        const html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Blawby AI Chatbot API</title>\n    <style>\n        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; line-height: 1.6; }\n        h1 { color: #2563eb; border-bottom: 2px solid #e5e7eb; padding-bottom: 10px; }\n        h2 { color: #374151; margin-top: 30px; }\n        .endpoint { background: #f9fafb; padding: 15px; border-radius: 8px; margin: 15px 0; border-left: 4px solid #2563eb; }\n        .method { font-weight: bold; color: #059669; }\n        .url { font-family: monospace; background: #f3f4f6; padding: 2px 6px; border-radius: 4px; }\n        .description { color: #6b7280; margin-top: 5px; }\n        .example { background: #1f2937; color: #f9fafb; padding: 15px; border-radius: 8px; margin: 10px 0; font-family: monospace; font-size: 14px; }\n        .status { display: inline-block; padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: bold; }\n        .status.ok { background: #dcfce7; color: #166534; }\n        .status.error { background: #fee2e2; color: #991b1b; }\n    </style>\n</head>\n<body>\n    <h1>\uD83E\uDD16 Blawby AI Chatbot API</h1>\n    <p>Welcome to the Blawby AI Chatbot API. This service provides AI-powered legal assistance through Cloudflare Workers AI.</p>\n    \n    <h2>\uD83D\uDCCB Available Endpoints</h2>\n    \n    <div class=\"endpoint\">\n        <div class=\"method\">GET</div>\n        <div class=\"url\">/api/health</div>\n        <div class=\"description\">Health check endpoint to verify API status</div>\n        <div class=\"example\">\ncurl -X GET \"https://blawby-ai-chatbot.paulchrisluke.workers.dev/api/health\"\n        </div>\n    </div>\n\n    <div class=\"endpoint\">\n        <div class=\"method\">GET</div>\n        <div class=\"url\">/api/teams</div>\n        <div class=\"description\">Retrieve available law firm teams and their configurations</div>\n        <div class=\"example\">\ncurl -X GET \"https://blawby-ai-chatbot.paulchrisluke.workers.dev/api/teams\"\n        </div>\n    </div>\n\n    <div class=\"endpoint\">\n        <div class=\"method\">POST</div>\n        <div class=\"url\">/api/chat</div>\n        <div class=\"description\">Send messages to the AI legal assistant and receive responses</div>\n        <div class=\"example\">\ncurl -X POST \"https://blawby-ai-chatbot.paulchrisluke.workers.dev/api/chat\" \\\\\n  -H \"Content-Type: application/json\" \\\\\n  -d '{\n    \"messages\": [\n      {\"role\": \"user\", \"content\": \"Hello, I need help with a legal question about contracts.\"}\n    ],\n    \"teamId\": \"test-team\",\n    \"sessionId\": \"optional-session-id\"\n  }'\n        </div>\n    </div>\n\n    <h2>\uD83D\uDD27 API Status</h2>\n    <div class=\"status ok\">\u2705 API is operational</div>\n    <div class=\"status ok\">\u2705 AI Model: Llama 3.1 8B</div>\n    <div class=\"status ok\">\u2705 Database: D1 (blawby-ai-chatbot)</div>\n    <div class=\"status ok\">\u2705 KV Storage: Chat Sessions</div>\n\n    <h2>\uD83D\uDCDA Documentation</h2>\n    <p>This API is designed to integrate with the Blawby AI legal assistant frontend. For more information about the project, see the <a href=\"https://github.com/your-repo/preact-chat-gpt-interface\" target=\"_blank\">GitHub repository</a>.</p>\n\n    <h2>\uD83D\uDD17 Integration</h2>\n    <p>To integrate with your frontend application, use the endpoints above with proper CORS headers. The API supports cross-origin requests and returns JSON responses.</p>\n\n    <footer style=\"margin-top: 50px; padding-top: 20px; border-top: 1px solid #e5e7eb; color: #6b7280; font-size: 14px;\">\n        <p>Blawby AI Chatbot API \u2022 Powered by Cloudflare Workers AI</p>\n    </footer>\n</body>\n</html>`;\n        \n        return new Response(html, {\n          headers: { 'Content-Type': 'text/html;charset=UTF-8' }\n        });\n      }\n\n      // 404 for unknown routes\n      return new Response(JSON.stringify({ error: 'Not found' }), {\n        status: 404,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      });\n\n    } catch (error) {\n      console.error('Worker error:', error);\n      return new Response(JSON.stringify({ error: 'Internal server error' }), {\n        status: 500,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      });\n    }\n  },\n};\n\nasync function handleChat(request: Request, env: Env, corsHeaders: Record<string, string>): Promise<Response> {\n  if (request.method === 'POST') {\n    try {\n      const body = await request.json() as ChatRequest;\n      \n      // Validate input\n      if (!body.messages || !Array.isArray(body.messages) || body.messages.length === 0) {\n        return new Response(JSON.stringify({ \n          error: 'Invalid request: messages array is required and must not be empty' \n        }), {\n          status: 400,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      }\n\n      // Validate message format\n      for (const message of body.messages) {\n        if (!message.role || !message.content) {\n          return new Response(JSON.stringify({ \n            error: 'Invalid message format: each message must have role and content' \n          }), {\n            status: 400,\n            headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n          });\n        }\n      }\n\n      // Get team configuration if teamId is provided\n      let teamConfig = null;\n      if (body.teamId) {\n        // In a real implementation, this would query the database\n        const mockTeams = [\n          { id: 'test-team', name: 'Test Law Firm', config: { consultationFee: 150, requiresPayment: true } },\n          { id: 'family-law-team', name: 'Family Law Specialists', config: { consultationFee: 200, requiresPayment: true } },\n          { id: 'criminal-defense-team', name: 'Criminal Defense Attorneys', config: { consultationFee: 300, requiresPayment: true } },\n          { id: 'demo', name: 'Demo Law Firm', config: { consultationFee: 0, requiresPayment: false } }\n        ];\n        teamConfig = mockTeams.find(team => team.id === body.teamId);\n      }\n\n      // Create team-specific system prompt\n      const systemPrompt = teamConfig \n        ? `You are a helpful legal assistant for ${teamConfig.name}. Provide clear, professional, and accurate legal information. Always remind users that you are an AI assistant and recommend consulting with a qualified attorney for specific legal advice.${teamConfig.config.requiresPayment ? ` Consultation fee: $${teamConfig.config.consultationFee}.` : ' Free consultation available.'}`\n        : 'You are a helpful legal assistant for Blawby AI. Provide clear, professional, and accurate legal information. Always remind users that you are an AI assistant and recommend consulting with a qualified attorney for specific legal advice.';\n\n      // Generate AI response\n      const response = await env.AI.run('@cf/meta/llama-3.1-8b-instruct', {\n        messages: [\n          { \n            role: 'system', \n            content: systemPrompt\n          },\n          ...body.messages\n        ],\n        stream: false\n      });\n\n      return new Response(JSON.stringify({ \n        response: response.response,\n        timestamp: new Date().toISOString(),\n        sessionId: body.sessionId || null\n      }), {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      });\n    } catch (error) {\n      console.error('AI Error:', error);\n      return new Response(JSON.stringify({ \n        error: 'AI service temporarily unavailable',\n        details: error.message\n      }), {\n        status: 500,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      });\n    }\n  }\n\n  return new Response(JSON.stringify({ error: 'Method not allowed' }), {\n    status: 405,\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  });\n}\n\nasync function handleTeams(request: Request, env: Env, corsHeaders: Record<string, string>): Promise<Response> {\n  if (request.method === 'GET') {\n    try {\n      // Mock team data for now - will be replaced with database queries\n      const teams = [\n        { \n          id: 'test-team', \n          name: 'Test Law Firm', \n          config: { \n            aiModel: 'llama',\n            consultationFee: 150,\n            requiresPayment: true,\n            availableServices: ['family-law', 'criminal-defense', 'civil-litigation']\n          } \n        },\n        { \n          id: 'family-law-team', \n          name: 'Family Law Specialists', \n          config: { \n            aiModel: 'llama',\n            consultationFee: 200,\n            requiresPayment: true,\n            availableServices: ['divorce', 'child-custody', 'adoption', 'prenuptial-agreements']\n          } \n        },\n        { \n          id: 'criminal-defense-team', \n          name: 'Criminal Defense Attorneys', \n          config: { \n            aiModel: 'llama',\n            consultationFee: 300,\n            requiresPayment: true,\n            availableServices: ['dui-defense', 'drug-charges', 'assault', 'white-collar-crime']\n          } \n        },\n        { \n          id: 'demo', \n          name: 'Demo Law Firm', \n          config: { \n            aiModel: 'llama',\n            consultationFee: 0,\n            requiresPayment: false,\n            availableServices: ['general-consultation', 'legal-advice']\n          } \n        }\n      ];\n\n      return new Response(JSON.stringify(teams), {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      });\n    } catch (error) {\n      console.error('Teams Error:', error);\n      return new Response(JSON.stringify({ \n        error: 'Failed to fetch teams',\n        details: error.message\n      }), {\n        status: 500,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      });\n    }\n  }\n\n  return new Response(JSON.stringify({ error: 'Method not allowed' }), {\n    status: 405,\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  });\n} ", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/paulchrisluke/Repos2025/preact-cloudflare-intake-chatbot/preact-chat-gpt-interface/worker/index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/paulchrisluke/.nvm/versions/node/v20.19.2/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/paulchrisluke/.nvm/versions/node/v20.19.2/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/paulchrisluke/Repos2025/preact-cloudflare-intake-chatbot/preact-chat-gpt-interface/worker/index.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/paulchrisluke/Repos2025/preact-cloudflare-intake-chatbot/preact-chat-gpt-interface/.wrangler/tmp/bundle-LiPYD9/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/paulchrisluke/.nvm/versions/node/v20.19.2/lib/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/paulchrisluke/Repos2025/preact-cloudflare-intake-chatbot/preact-chat-gpt-interface/.wrangler/tmp/bundle-LiPYD9/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/paulchrisluke/Repos2025/preact-cloudflare-intake-chatbot/preact-chat-gpt-interface/.wrangler/tmp/bundle-LiPYD9/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": ";;;;AAAA,IAAM,OAAO,oBAAI,IAAI;AAErB,SAAS,SAAS,SAAS,MAAM;AAChC,QAAM,MACL,mBAAmB,MAChB,UACA,IAAI;AAAA,KACH,OAAO,YAAY,WACjB,IAAI,QAAQ,SAAS,IAAI,IACzB,SACD;AAAA,EACH;AACH,MAAI,IAAI,QAAQ,IAAI,SAAS,SAAS,IAAI,aAAa,UAAU;AAChE,QAAI,CAAC,KAAK,IAAI,IAAI,SAAS,CAAC,GAAG;AAC9B,WAAK,IAAI,IAAI,SAAS,CAAC;AACvB,cAAQ;AAAA,QACP;AAAA,KACO,IAAI,SAAS,CAAC;AAAA;AAAA,MACtB;AAAA,IACD;AAAA,EACD;AACD;AAnBS;AAqBT,WAAW,QAAQ,IAAI,MAAM,WAAW,OAAO;AAAA,EAC9C,MAAM,QAAQ,SAAS,UAAU;AAChC,UAAM,CAAC,SAAS,IAAI,IAAI;AACxB,aAAS,SAAS,IAAI;AACtB,WAAO,QAAQ,MAAM,QAAQ,SAAS,QAAQ;AAAA,EAC/C;AACD,CAAC;;;ACVD,IAAO,iBAAQ;AAAA,EACb,MAAM,MAAM,SAAkB,KAAU,KAA0C;AAChF,UAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAC/B,UAAM,OAAO,IAAI;AAGjB,UAAM,cAAc;AAAA,MAClB,+BAA+B;AAAA,MAC/B,gCAAgC;AAAA,MAChC,gCAAgC;AAAA,IAClC;AAGA,QAAI,QAAQ,WAAW,WAAW;AAChC,aAAO,IAAI,SAAS,MAAM,EAAE,SAAS,YAAY,CAAC;AAAA,IACpD;AAEA,QAAI;AAEF,UAAI,KAAK,WAAW,WAAW,GAAG;AAChC,eAAO,WAAW,SAAS,KAAK,WAAW;AAAA,MAC7C;AAEA,UAAI,KAAK,WAAW,YAAY,GAAG;AACjC,eAAO,YAAY,SAAS,KAAK,WAAW;AAAA,MAC9C;AAGA,UAAI,SAAS,eAAe;AAC1B,eAAO,IAAI,SAAS,KAAK,UAAU;AAAA,UACjC,QAAQ;AAAA,UACR,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,UAClC,aAAa;AAAA,QACf,CAAC,GAAG;AAAA,UACF,SAAS,EAAE,GAAG,aAAa,gBAAgB,mBAAmB;AAAA,QAChE,CAAC;AAAA,MACH;AAGA,UAAI,SAAS,gBAAgB;AAC3B,eAAO,IAAI,SAAS,MAAM,EAAE,QAAQ,IAAI,CAAC;AAAA,MAC3C;AAGA,UAAI,SAAS,KAAK;AAChB,cAAM,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgFb,eAAO,IAAI,SAAS,MAAM;AAAA,UACxB,SAAS,EAAE,gBAAgB,0BAA0B;AAAA,QACvD,CAAC;AAAA,MACH;AAGA,aAAO,IAAI,SAAS,KAAK,UAAU,EAAE,OAAO,YAAY,CAAC,GAAG;AAAA,QAC1D,QAAQ;AAAA,QACR,SAAS,EAAE,GAAG,aAAa,gBAAgB,mBAAmB;AAAA,MAChE,CAAC;AAAA,IAEH,SAAS,OAAO;AACd,cAAQ,MAAM,iBAAiB,KAAK;AACpC,aAAO,IAAI,SAAS,KAAK,UAAU,EAAE,OAAO,wBAAwB,CAAC,GAAG;AAAA,QACtE,QAAQ;AAAA,QACR,SAAS,EAAE,GAAG,aAAa,gBAAgB,mBAAmB;AAAA,MAChE,CAAC;AAAA,IACH;AAAA,EACF;AACF;AAEA,eAAe,WAAW,SAAkB,KAAU,aAAwD;AAC5G,MAAI,QAAQ,WAAW,QAAQ;AAC7B,QAAI;AACF,YAAM,OAAO,MAAM,QAAQ,KAAK;AAGhC,UAAI,CAAC,KAAK,YAAY,CAAC,MAAM,QAAQ,KAAK,QAAQ,KAAK,KAAK,SAAS,WAAW,GAAG;AACjF,eAAO,IAAI,SAAS,KAAK,UAAU;AAAA,UACjC,OAAO;AAAA,QACT,CAAC,GAAG;AAAA,UACF,QAAQ;AAAA,UACR,SAAS,EAAE,GAAG,aAAa,gBAAgB,mBAAmB;AAAA,QAChE,CAAC;AAAA,MACH;AAGA,iBAAW,WAAW,KAAK,UAAU;AACnC,YAAI,CAAC,QAAQ,QAAQ,CAAC,QAAQ,SAAS;AACrC,iBAAO,IAAI,SAAS,KAAK,UAAU;AAAA,YACjC,OAAO;AAAA,UACT,CAAC,GAAG;AAAA,YACF,QAAQ;AAAA,YACR,SAAS,EAAE,GAAG,aAAa,gBAAgB,mBAAmB;AAAA,UAChE,CAAC;AAAA,QACH;AAAA,MACF;AAGA,UAAI,aAAa;AACjB,UAAI,KAAK,QAAQ;AAEf,cAAM,YAAY;AAAA,UAChB,EAAE,IAAI,aAAa,MAAM,iBAAiB,QAAQ,EAAE,iBAAiB,KAAK,iBAAiB,KAAK,EAAE;AAAA,UAClG,EAAE,IAAI,mBAAmB,MAAM,0BAA0B,QAAQ,EAAE,iBAAiB,KAAK,iBAAiB,KAAK,EAAE;AAAA,UACjH,EAAE,IAAI,yBAAyB,MAAM,8BAA8B,QAAQ,EAAE,iBAAiB,KAAK,iBAAiB,KAAK,EAAE;AAAA,UAC3H,EAAE,IAAI,QAAQ,MAAM,iBAAiB,QAAQ,EAAE,iBAAiB,GAAG,iBAAiB,MAAM,EAAE;AAAA,QAC9F;AACA,qBAAa,UAAU,KAAK,UAAQ,KAAK,OAAO,KAAK,MAAM;AAAA,MAC7D;AAGA,YAAM,eAAe,aACjB,yCAAyC,WAAW,IAAI,gMAAgM,WAAW,OAAO,kBAAkB,uBAAuB,WAAW,OAAO,eAAe,MAAM,+BAA+B,KACzX;AAGJ,YAAM,WAAW,MAAM,IAAI,GAAG,IAAI,kCAAkC;AAAA,QAClE,UAAU;AAAA,UACR;AAAA,YACE,MAAM;AAAA,YACN,SAAS;AAAA,UACX;AAAA,UACA,GAAG,KAAK;AAAA,QACV;AAAA,QACA,QAAQ;AAAA,MACV,CAAC;AAED,aAAO,IAAI,SAAS,KAAK,UAAU;AAAA,QACjC,UAAU,SAAS;AAAA,QACnB,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,QAClC,WAAW,KAAK,aAAa;AAAA,MAC/B,CAAC,GAAG;AAAA,QACF,SAAS,EAAE,GAAG,aAAa,gBAAgB,mBAAmB;AAAA,MAChE,CAAC;AAAA,IACH,SAAS,OAAO;AACd,cAAQ,MAAM,aAAa,KAAK;AAChC,aAAO,IAAI,SAAS,KAAK,UAAU;AAAA,QACjC,OAAO;AAAA,QACP,SAAS,MAAM;AAAA,MACjB,CAAC,GAAG;AAAA,QACF,QAAQ;AAAA,QACR,SAAS,EAAE,GAAG,aAAa,gBAAgB,mBAAmB;AAAA,MAChE,CAAC;AAAA,IACH;AAAA,EACF;AAEA,SAAO,IAAI,SAAS,KAAK,UAAU,EAAE,OAAO,qBAAqB,CAAC,GAAG;AAAA,IACnE,QAAQ;AAAA,IACR,SAAS,EAAE,GAAG,aAAa,gBAAgB,mBAAmB;AAAA,EAChE,CAAC;AACH;AAhFe;AAkFf,eAAe,YAAY,SAAkB,KAAU,aAAwD;AAC7G,MAAI,QAAQ,WAAW,OAAO;AAC5B,QAAI;AAEF,YAAM,QAAQ;AAAA,QACZ;AAAA,UACE,IAAI;AAAA,UACJ,MAAM;AAAA,UACN,QAAQ;AAAA,YACN,SAAS;AAAA,YACT,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,YACjB,mBAAmB,CAAC,cAAc,oBAAoB,kBAAkB;AAAA,UAC1E;AAAA,QACF;AAAA,QACA;AAAA,UACE,IAAI;AAAA,UACJ,MAAM;AAAA,UACN,QAAQ;AAAA,YACN,SAAS;AAAA,YACT,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,YACjB,mBAAmB,CAAC,WAAW,iBAAiB,YAAY,uBAAuB;AAAA,UACrF;AAAA,QACF;AAAA,QACA;AAAA,UACE,IAAI;AAAA,UACJ,MAAM;AAAA,UACN,QAAQ;AAAA,YACN,SAAS;AAAA,YACT,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,YACjB,mBAAmB,CAAC,eAAe,gBAAgB,WAAW,oBAAoB;AAAA,UACpF;AAAA,QACF;AAAA,QACA;AAAA,UACE,IAAI;AAAA,UACJ,MAAM;AAAA,UACN,QAAQ;AAAA,YACN,SAAS;AAAA,YACT,iBAAiB;AAAA,YACjB,iBAAiB;AAAA,YACjB,mBAAmB,CAAC,wBAAwB,cAAc;AAAA,UAC5D;AAAA,QACF;AAAA,MACF;AAEA,aAAO,IAAI,SAAS,KAAK,UAAU,KAAK,GAAG;AAAA,QACzC,SAAS,EAAE,GAAG,aAAa,gBAAgB,mBAAmB;AAAA,MAChE,CAAC;AAAA,IACH,SAAS,OAAO;AACd,cAAQ,MAAM,gBAAgB,KAAK;AACnC,aAAO,IAAI,SAAS,KAAK,UAAU;AAAA,QACjC,OAAO;AAAA,QACP,SAAS,MAAM;AAAA,MACjB,CAAC,GAAG;AAAA,QACF,QAAQ;AAAA,QACR,SAAS,EAAE,GAAG,aAAa,gBAAgB,mBAAmB;AAAA,MAChE,CAAC;AAAA,IACH;AAAA,EACF;AAEA,SAAO,IAAI,SAAS,KAAK,UAAU,EAAE,OAAO,qBAAqB,CAAC,GAAG;AAAA,IACnE,QAAQ;AAAA,IACR,SAAS,EAAE,GAAG,aAAa,gBAAgB,mBAAmB;AAAA,EAChE,CAAC;AACH;AAlEe;;;ACrPf,IAAM,YAAwB,8BAAO,SAAS,KAAK,MAAM,kBAAkB;AAC1E,MAAI;AACH,WAAO,MAAM,cAAc,KAAK,SAAS,GAAG;AAAA,EAC7C,UAAE;AACD,QAAI;AACH,UAAI,QAAQ,SAAS,QAAQ,CAAC,QAAQ,UAAU;AAC/C,cAAM,SAAS,QAAQ,KAAK,UAAU;AACtC,eAAO,EAAE,MAAM,OAAO,KAAK,GAAG,MAAM;AAAA,QAAC;AAAA,MACtC;AAAA,IACD,SAAS,GAAG;AACX,cAAQ,MAAM,4CAA4C,CAAC;AAAA,IAC5D;AAAA,EACD;AACD,GAb8B;AAe9B,IAAO,6CAAQ;;;ACRf,SAAS,YAAY,GAAmB;AACvC,SAAO;AAAA,IACN,MAAM,GAAG;AAAA,IACT,SAAS,GAAG,WAAW,OAAO,CAAC;AAAA,IAC/B,OAAO,GAAG;AAAA,IACV,OAAO,GAAG,UAAU,SAAY,SAAY,YAAY,EAAE,KAAK;AAAA,EAChE;AACD;AAPS;AAUT,IAAM,YAAwB,8BAAO,SAAS,KAAK,MAAM,kBAAkB;AAC1E,MAAI;AACH,WAAO,MAAM,cAAc,KAAK,SAAS,GAAG;AAAA,EAC7C,SAAS,GAAQ;AAChB,UAAM,QAAQ,YAAY,CAAC;AAC3B,WAAO,SAAS,KAAK,OAAO;AAAA,MAC3B,QAAQ;AAAA,MACR,SAAS,EAAE,+BAA+B,OAAO;AAAA,IAClD,CAAC;AAAA,EACF;AACD,GAV8B;AAY9B,IAAO,2CAAQ;;;ACzBJ,IAAM,mCAAmC;AAAA,EAE9B;AAAA,EAAyB;AAC3C;AACA,IAAO,sCAAQ;;;ACcnB,IAAM,wBAAsC,CAAC;AAKtC,SAAS,uBAAuB,MAAqC;AAC3E,wBAAsB,KAAK,GAAG,KAAK,KAAK,CAAC;AAC1C;AAFgB;AAShB,SAAS,uBACR,SACA,KACA,KACA,UACA,iBACsB;AACtB,QAAM,CAAC,MAAM,GAAG,IAAI,IAAI;AACxB,QAAM,gBAAmC;AAAA,IACxC;AAAA,IACA,KAAK,YAAY,QAAQ;AACxB,aAAO,uBAAuB,YAAY,QAAQ,KAAK,UAAU,IAAI;AAAA,IACtE;AAAA,EACD;AACA,SAAO,KAAK,SAAS,KAAK,KAAK,aAAa;AAC7C;AAfS;AAiBF,SAAS,kBACf,SACA,KACA,KACA,UACA,iBACsB;AACtB,SAAO,uBAAuB,SAAS,KAAK,KAAK,UAAU;AAAA,IAC1D,GAAG;AAAA,IACH;AAAA,EACD,CAAC;AACF;AAXgB;;;AC3ChB,IAAM,iCAAN,MAAM,gCAA8D;AAAA,EAGnE,YACU,eACA,MACT,SACC;AAHQ;AACA;AAGT,SAAK,WAAW;AAAA,EACjB;AAAA,EArBD,OAYoE;AAAA;AAAA;AAAA,EAC1D;AAAA,EAUT,UAAU;AACT,QAAI,EAAE,gBAAgB,kCAAiC;AACtD,YAAM,IAAI,UAAU,oBAAoB;AAAA,IACzC;AAEA,SAAK,SAAS;AAAA,EACf;AACD;AAEA,SAAS,oBAAoB,QAA0C;AAEtE,MACC,qCAAqC,UACrC,iCAAiC,WAAW,GAC3C;AACD,WAAO;AAAA,EACR;AAEA,aAAW,cAAc,kCAAkC;AAC1D,wBAAoB,UAAU;AAAA,EAC/B;AAEA,QAAM,kBAA+C,gCACpD,SACA,KACA,KACC;AACD,QAAI,OAAO,UAAU,QAAW;AAC/B,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC9D;AACA,WAAO,OAAO,MAAM,SAAS,KAAK,GAAG;AAAA,EACtC,GATqD;AAWrD,SAAO;AAAA,IACN,GAAG;AAAA,IACH,MAAM,SAAS,KAAK,KAAK;AACxB,YAAM,aAAyB,gCAAU,MAAM,MAAM;AACpD,YAAI,SAAS,eAAe,OAAO,cAAc,QAAW;AAC3D,gBAAM,aAAa,IAAI;AAAA,YACtB,KAAK,IAAI;AAAA,YACT,KAAK,QAAQ;AAAA,YACb,MAAM;AAAA,YAAC;AAAA,UACR;AACA,iBAAO,OAAO,UAAU,YAAY,KAAK,GAAG;AAAA,QAC7C;AAAA,MACD,GAT+B;AAU/B,aAAO,kBAAkB,SAAS,KAAK,KAAK,YAAY,eAAe;AAAA,IACxE;AAAA,EACD;AACD;AAxCS;AA0CT,SAAS,qBACR,OAC8B;AAE9B,MACC,qCAAqC,UACrC,iCAAiC,WAAW,GAC3C;AACD,WAAO;AAAA,EACR;AAEA,aAAW,cAAc,kCAAkC;AAC1D,wBAAoB,UAAU;AAAA,EAC/B;AAGA,SAAO,cAAc,MAAM;AAAA,IAC1B,mBAAyE,wBACxE,SACA,KACA,QACI;AACJ,WAAK,MAAM;AACX,WAAK,MAAM;AACX,UAAI,MAAM,UAAU,QAAW;AAC9B,cAAM,IAAI,MAAM,sDAAsD;AAAA,MACvE;AACA,aAAO,MAAM,MAAM,OAAO;AAAA,IAC3B,GAXyE;AAAA,IAazE,cAA0B,wBAAC,MAAM,SAAS;AACzC,UAAI,SAAS,eAAe,MAAM,cAAc,QAAW;AAC1D,cAAM,aAAa,IAAI;AAAA,UACtB,KAAK,IAAI;AAAA,UACT,KAAK,QAAQ;AAAA,UACb,MAAM;AAAA,UAAC;AAAA,QACR;AACA,eAAO,MAAM,UAAU,UAAU;AAAA,MAClC;AAAA,IACD,GAT0B;AAAA,IAW1B,MAAM,SAAwD;AAC7D,aAAO;AAAA,QACN;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACN;AAAA,IACD;AAAA,EACD;AACD;AAnDS;AAqDT,IAAI;AACJ,IAAI,OAAO,wCAAU,UAAU;AAC9B,kBAAgB,oBAAoB,mCAAK;AAC1C,WAAW,OAAO,wCAAU,YAAY;AACvC,kBAAgB,qBAAqB,mCAAK;AAC3C;AACA,IAAO,kCAAQ;",
  "names": []
}
